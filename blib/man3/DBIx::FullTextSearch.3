.\" Automatically generated by Pod::Man version 1.02
.\" Fri Jun 16 16:11:11 2000
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "FullTextSearch 3"
.TH FullTextSearch 3 "perl v5.6.0" "2000-06-15" "User Contributed Perl Documentation"
.UC
.SH "NAME"
DBIx::FullTextSearch \- Indexing documents with MySQL as storage
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&    use DBIx::FullTextSearch;
\&    use DBI;
\&    # connect to database (regular DBI)
\&    my $dbh = DBI->connect('dbi:mysql:database', 'user', 'passwd');
\&    # create a new index
\&    my $fts = DBIx::FullTextSearch->create($dbh, 'fts_web_1',
\&                'frontend' => 'string', 'backend' => 'blob');
\&    # or open existing one
\&    # my $fts = DBIx::FullTextSearch->open($dbh, 'fts_web_1');
.Ve
.Vb 3
\&    # index documents
\&    $fts->index_document('krtek', 'krtek leze pod zemi');
\&    $fts->index_document('jezek', 'Jezek ma ostre bodliny.');
.Ve
.Vb 4
\&    # search for matches
\&    my @docs = $fts->contains('foo');
\&    my @docs = $fts->econtains('+foo', '-Bar');
\&    my @docs = $fts->search('+foo -Bar');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::FullTextSearch is a pure man's solution for indexing contents of documents.
It uses the MySQL database to store the information about words and
documents and provides Perl interface for indexing new documents,
making changes and searching for matches.  For DBIx::FullTextSearch, a document
is nearly anything \*(-- Perl scalar, file, Web document, database field.
.PP
The basic style of interface is shown above. What you need is a MySQL
database and a \s-1DBI\s0 with \s-1DBD:\s0:mysql. Then you create a DBIx::FullTextSearch index
\&\-\- a set of tables that maintain all necessary information. Once created
it can be accessed many times, either for updating the index (adding
documents) or searching.
.PP
DBIx::FullTextSearch uses one basic table to store parameters of the index. Second
table is used to store the actual information about documents and words,
and depending on the type of the index (specified during index creation)
there may be more tables to store additional information (like
conversion from external string names (eg. \s-1URL\s0's) to internal numeric
form). For a user, these internal thingies and internal behaviour of the
index are not important. The important part is the \s-1API\s0, the methods to
index document and ask questions about words in documents. However,
certain understanding of how it all works may be usefull when you are
deciding if this module is for you and what type of index will best
suit your needs.
.Sh "Frontends"
.IX Subsection "Frontends"
From the user, application point of view, the DBIx::FullTextSearch index stores
documents that are named in a certain way, allows adding new documents,
and provides methods to ask: \*(L"give me list of names of documents that
contain this list of words\*(R". The DBIx::FullTextSearch index doesn't store the
documents itself. Instead, it stores information about words in the
documents in such a structured way that it makes easy and fast to look
up what documents contain certain words and return names of the
documents.
.PP
DBIx::FullTextSearch provides a couple of predefined frontend classes that specify
various types of documents (and the way they relate to their names).
.Ip "default" 4
.IX Item "default"
By default, user specifies the integer number of the document and the
content (body) of the document. The code would for example read
.Sp
.Vb 1
\&        $fts->index_document(53, 'zastavujeme vyplaty vkladu');
.Ve
and DBIx::FullTextSearch will remember that the document 53 contains three words.
When looking for all documents containing word (string) vklad, a call
.Sp
.Vb 1
\&        my @docs = $fts->contains('vklad%');
.Ve
would return numbers of all documents containing words starting with
\&'vklad', 53 among them.
.Sp
So here it's user's responsibility to maintain a relation between the
document numbers and their content, to know that a document 53 is about
vklady. Perhaps the documents are already stored somewhere and have
inique numeric id.
.Ip "string" 4
.IX Item "string"
Frontend \fBstring\fR allows the user to specify the names of the documents as
strings, instead of numbers. Still the user has to specify both the
name of the document and the content:
.Sp
.Vb 2
\&        $fts->index_document('foobar',
\&                        'the quick brown fox jumped over lazy dog!');
.Ve
After that,
.Sp
.Vb 1
\&        $fts->contains('dog')
.Ve
will return 'foobar' as one of the names of documents with word
\&'dog' in it.
.Ip "file" 4
.IX Item "file"
To index files, use the frontend \fBfile\fR. Here the content of the document
is clearly the content of the file specified by the filename, so in
a call to index_document, only the name is needed \*(-- the content of the
file is read by the DBIx::FullTextSearch transparently:
.Sp
.Vb 2
\&        $fts->index_document('/usr/doc/FAQ/Linux-FAQ');
\&        my @files = $fts->contains('penguin');
.Ve
.Ip "url" 4
.IX Item "url"
Web document can be indexed by the frontend \fBurl\fR. DBIx::FullTextSearch uses \s-1LWP\s0 to
get the document and then parses it normally:
.Sp
.Vb 1
\&        $fts->index_document('http://www.perl.com/');
.Ve
.Ip "table" 4
.IX Item "table"
You can have a DBIx::FullTextSearch index that indexes char or blob fields in MySQL
table. Since MySQL doesn't support triggers, you have to call the
index_document method of DBIx::FullTextSearch any time something changes in the
table. So the sequence probably will be
.Sp
.Vb 3
\&        $dbh->do('insert into the_table (id, data, other_fields)
\&                values (?, ?, ?)', {}, $name, $data, $date_or_something);
\&        $fts->index_document($name);
.Ve
When calling contains, the id (name) of the record will be returned. If
the id in the_table is numeric, it's directly used as the internal
numeric id, otherwise a string's way of converting the id to numeric
form is used.
.PP
The structure of DBIx::FullTextSearch is very flexible and adding new frontend
(what will be indexed) is very easy.
.Sh "Backends"
.IX Subsection "Backends"
While frontend specifies what is indexed and how the user sees the
collection of documents, backend is about low level database way of
actually storing the information in the tables. Three types are
available:
.Ip "blob" 4
.IX Item "blob"
For each word, a blob holding list of all documents containing that word
is stored in the table, with the count (number of occurencies)
associated with each document number. That makes it for very compact
storage. Since the document names (for example \s-1URL\s0) are internally
converted to numbers, storing and fetching the data is fast. However,
updating the information is very slow, since information concerning one
document is spread across all table, without any direct database access.
Updating a document (or merely reindexing it) requires update of all
blobs, which is slow.
.Sp
The list of documents is stored sorted by document name so that
fetching an information about a document for one word is relatively
easy, still a need to update (or at least scan) all records in the table
makes this storage unsuitable for collections of documents that often
change.
.Ip "column" 4
.IX Item "column"
The \fBcolumn\fR backend stores a word/document pair in database fields,
indexing both, thus allowing both fast retrieval and updates \*(-- it's
easy to delete all records describing one document and insert new ones.
However, the database indexes that have to be maintained are large.
.Sp
Both \fBblob\fR and \fBcolumn\fR backends only store a count \*(-- number of
occurencies of the word in the document (and even this can be switched
off, yielding just a yes/no information about the word's presence).
This allows questions like
.Sp
.Vb 2
\&        all documents containing words 'voda' or 'Mattoni'
\&                but not a word 'kyselka'
.Ve
but you cannot ask whether a document contains a phrase 'kyselka
Mattoni' because such information is not maintained by these types of
backends.
.Ip "phrase" 4
.IX Item "phrase"
To allow phrase matching, a \fBphrase\fR backend is available. For each word
and document number it stores a blob of lists of positions of the word
in the document. A query
.Sp
.Vb 1
\&        $fts->contains('kyselk% Mattoni');
.Ve
then only returns those documents (document names/numbers) where word
kyselka (or kyselky, or so) is just before word Mattoni.
.Sh "Mixing frontends and backends"
.IX Subsection "Mixing frontends and backends"
Any frontend can be used with any backend in one DBIx::FullTextSearch index. You
can index Web documents with \fBurl\fR frontend and \fBphrase\fR backend
to be able to find phrases in the documents. And you can use the
default, number based document scheme with \fBblob\fR backend to use the disk
space as efficiently as possible \*(-- this is usefull for example for
mailing-list archives, where we need to index huge number of documents
that do not change at all.
.PP
Finding optimal combination is very important and may require some
analysis of the document collection and manipulation, as well as the
speed and storage requirements. Benchmarking on actual target platform
is very usefull during the design phase.
.SH "METHODS"
.IX Header "METHODS"
The following methods are available on the user side as DBIx::FullTextSearch \s-1API\s0.
.Ip "create" 4
.IX Item "create"
.Vb 1
\&        my $fts = DBIx::FullTextSearch->create($dbh, $index_name, %opts);
.Ve
The class method \fBcreate\fR creates index of given name (the name of the
index is the name of its basic parameter table) and all necessary
tables, returns an object \*(-- newly created index. The options that may
be specified after the index name define the frontend and backend types,
storage parameters (how many bits for what values), etc. See below for
list of create options and discussion of their use.
.Ip "open" 4
.IX Item "pen"
.Vb 1
\&        my $fts = DBIx::FullTextSearch->open($dbh, $index_name);
.Ve
Opens and returns object, accessing specifies DBIx::FullTextSearch index. Since all
the index parameters and information are stored in the \f(CW$index_name\fR table
(including names of all other needed tables), the database handler and
the name of the parameter table are the only needed arguments.
.Ip "index_document" 4
.IX Item "index_document"
.Vb 2
\&        $fts->index_document(45, 'Sleva pri nakupu stribra.');
\&        $fts->index_document('http://www.mozilla.org/');
.Ve
For the default and \fBstring\fR frontends, two arguments are expected \*(-- the
name (number or string) of the document and its content. For \fBfile\fR and
\&\fBurl\fR frontends only the name of the document is needed. The method
returns number of words indexed (subject to wild change).
.Ip "delete_document" 4
.IX Item "delete_document"
.Vb 1
\&        $fts->delete_document('http://www.mozilla.org/');
.Ve
Removes information about document from the index. Note that for \fBblob\fR
backend this is very time consuming process.
.Ip "contains" 4
.IX Item "contains"
.Vb 1
\&        my @docs = $fts->contains('sleva', 'strib%');
.Ve
Returns list of names (numbers or strings, depending on the frontend)
of documents that contain some of specified words.
.Ip "econtains" 4
.IX Item "econtains"
.Vb 1
\&        my @docs = $fts->contains('foo', '+bar%', '-koo');
.Ve
Econtains stands for extended contains and allows words to be prefixed
by plus or minus signs to specify that the word must or mustn't be
present in the document for it to match.
.Ip "contains_hashref, econtains_hashref" 4
.IX Item "contains_hashref, econtains_hashref"
Similar to \fBcontains\fR and \fBecontains\fR, only instead of list of document
names, there methods return a hash reference to a hash where keys are
the document names and values are the number of occurencies of the
words.
.Ip "search" 4
.IX Item "search"
.Vb 1
\&        my @docs = $fts->search(qq{+"this is a phrase" -koo +bar foo});
.Ve
This is a wrapper to econtains which takes a raw search query and parses
it.
.Ip "drop" 4
.IX Item "drop"
Removes all tables associated with the index, including the base
parameter table. Effectivelly destroying the index form the database.
.SH "INDEX OPTIONS"
.IX Header "INDEX OPTIONS"
Here we list the options that may be passed to DBIx::FullTextSearch->create call.
These allow to specify the style and storage parameters in great detail.
.Ip "backend" 4
.IX Item "backend"
The backend type, default \fBblob\fR, possible values blob, column and phrase
(see above for explanation).
.Ip "frontend" 4
.IX Item "frontend"
The frontend type. The default frontend requires the user to specify
numeric id of the document together with the content of the document,
other possible values are string, file and url (see above for
more info).
.Ip "word_length" 4
.IX Item "word_length"
Maximum length of words that may be indexed, default 30.
.Ip "data_table" 4
.IX Item "data_table"
Name of the table where the actual data about word/document relation is
stored. By default, the name of the index (of the base table) with _data
suffix is used.
.Ip "name_length" 4
.IX Item "name_length"
Any frontend that uses strings as names of documents needs to maintain
a conversion table from these names to internal integer ids. This value
specifies maximum length of these string names (URLs, file names, ...).
.Ip "blob_direct_fetch" 4
.IX Item "blob_direct_fetch"
Only for blob backend. When looking for information about specific
document in the list stored in the blob, the blob backend uses division
of interval to find the correct place in the blob. When the interval
gets equal or shorter that this value, all values are fetched from the
database and the final search is done in Perl code sequentially.
.Ip "word_id_bits" 4
.IX Item "word_id_bits"
With column or phase backends, DBIx::FullTextSearch maintains a numeric id for each
word to optimize the space requirements. The word_id_bits parameter
specifies the number of bits to reserve for this conversion and thus
effectively limits number of distinct words that may be indexed. The
default is 16 bits and possible values are 8, 16, 24 or 32 bits.
.Ip "word_id_table" 4
.IX Item "word_id_table"
Name of the table that holds conversion from words to their numeric id
(for column and phrase backends). By default is the name of the index
with _words suffix.
.Ip "doc_id_bits" 4
.IX Item "doc_id_bits"
A number of bits to hold a numeric id of the document (that is either
provided by the user (with default frontend) or generated by the module
to accomplish the conversion from the string name of the document). This
value limits the maximum number of documents to hold. The default is 16
bits and possible values are 8, 16 and 32 bits for blob backend and 8,
16, 24 and 32 bits for column and phrase backends.
.Ip "doc_id_table" 4
.IX Item "doc_id_table"
Name of the table that holds conversion from string names of documents
to their numeric id, by default the name of the index with _docid
suffix.
.Ip "count_bits" 4
.IX Item "count_bits"
Number of bits reserved for storing number of occurencies of each word
in the document. The default is 8 and possible values are the same as
with doc_id_bits.
.Ip "position_bits" 4
.IX Item "position_bits"
With phrase backend, DBIx::FullTextSearch stores positions of each word of the
documents. This value specifies how much space should be reserved for
this purpose. The default is 32 bits and possible values are 8, 16 or 32
bits. This value limits the maximum number of words of each document
that can be stored.
.Ip "splitter" 4
.IX Item "splitter"
DBIx::FullTextSearch allows the user to provide any Perl code that will be used to
split the content of the document to words. The code will be evalled
inside of the DBIx::FullTextSearch code. The default is
.Sp
.Vb 1
\&        $data =~ /(\ew{2,$word_length})/g
.Ve
and shows that the input is stored in the variable \f(CW\*(C`$data\*(C'\fR and the code
may access any other variable available in the perl_and_index_data_*
methods (see source), especially \f(CW\*(C`$word_length\*(C'\fR to get the maximum length
of words and \f(CW\*(C`$backend\*(C'\fR to get the backend object.
.Sp
The default value also shows that by default, the minimum length of
words indexed is 2.
.Ip "filter" 4
.IX Item "filter"
The output words of splitter (and also any parameter of (e)contains*
methods) are send to filter that may do further processing. Filter is
again a Perl code, the default is
.Sp
.Vb 1
\&        map { lc $_ }
.Ve
showing that the filter operates on input list and by default does
conversion to lowercase (yielding case insensitive index).
.Ip "init_env" 4
.IX Item "init_env"
Because user defined splitter or filter may depend on other things that
it is reasonable to set before the actual procession of words, you can
use yet another Perl hook to set things up. The default is
.Sp
.Vb 1
\&        use locale
.Ve
.Ip "table_name" 4
.IX Item "table_name"
For table frontend; this is the name of the table that will be indexed.
.Ip "column_name" 4
.IX Item "column_name"
For table frontend; this is the name of the column in the table_name
that contains the documents \*(-- data to be indexed. It can also have
a form table.column that will be used if the table_name option is not
specified.
.Ip "column_id_name" 4
.IX Item "column_id_name"
For table frontend; this is the name of the field in table_name that
holds names (ids) of the records. If not specified, a field that has
primary key on it is used. If this field is numeric, it's values are
directly used as identifiers, otherwise a conversion to numeric values
is made.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
The create and open methods return the DBIx::FullTextSearch object on success, upon
failure they return undef and set error message in \f(CW$DBIx::FullTextSearch::errstr\fR
variable.
.PP
All other methods return reasonable (documented above) value on success,
failure is signalized by unreasonable (typically undef or null) return
value; the error message may then be retrieved by \f(CW$fts\fR->errstr method
call.
.SH "VERSION"
.IX Header "VERSION"
This documentation describes DBIx::FullTextSearch module version 0.49.
.SH "BUGS"
.IX Header "BUGS"
Error handling needs more polishing.
.PP
We do not check if the stored values are larger that specified by the
*_bits parameters.
.PP
No \s-1CGI\s0 administration tool at the moment.
.PP
No scoring algorithm implemented.
.PP
No support for stop words at the moment.
.SH "AUTHOR"
.IX Header "AUTHOR"
(c) 2000 Thomas J. Mather, tjmather@alumni.princeton.edu,
http://www.thoughtstore.com/~tjmather/
New York, \s-1NY\s0, \s-1USA\s0
.PP
(c) 1999 Jan Pazdziora, adelton@fi.muni.cz,
http://www.fi.muni.cz/~adelton/ at Faculty of Informatics, Masaryk
University in Brno, Czech Republic
.PP
All rights reserved. This package is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIDBI\fR\|(3), \fImycontextadmin\fR\|(1).
.SH "OTHER PRODUCTS and why I've written this module"
.IX Header "OTHER PRODUCTS and why I've written this module"
I'm aware of DBIx::TextIndex module and about UdmSearch utility, and
about htdig and glimpse on the non-database side of the world.
.PP
To me, using a database gives reasonable maintenance benefits. With
products that use their own files to store the information (even if the
storage algorithms are efficient and well thought of), you always
struggle with permissions on files and directories for various users,
with files that somebody accidently deleted or mungled, and making the
index available remotely is not trivial.
.PP
That's why I've wanted a module that will use a database as a storage
backend. With MySQL, you get remote access and access control for free,
and on many web servers MySQL is part of the standard equipment. So
using it for text indexes seemed natural.
.PP
However, existing DBIx::TextIndex and UdmSearch are too narrow-aimed to
me. The first only supports indexing of data that is stored in the
database, but you may not always want or need to store the documents in
the database as well. The UdmSearch on the other hand is only for web
documents, making it unsuitable for indexing mailing-list archives or
local data.
.PP
I believe that DBIx::FullTextSearch is reasonably flexible and still very
efficient. It doesn't enforce its own idea of what is good for you \-\-
the number of options is big and you can always extend the module with
your own backend of frontend if you feel that those provided are not
sufficient. Or you can extend existing by adding one or two parameters
that will add new features. Of course, patches are always welcome.
DBIx::FullTextSearch is a tool that can be deployed in many projects. It's not
a complete environment since different people have different needs. On
the other hand, the methods that it provides make it easy to build
a complete solution on top of this in very short course of time.
.PP
I was primarily inspired by the ConText cartrige of Oracle server. Since
MySQL doesn't support triggers, it showed up that Perl interface will be
needed. Of course, porting this module to (for example) PostgreSQL
should be easy, so different name is probably needed. On the other hand,
the code is sometimes very MySQL specific to make the module work
efficiently, so I didn't want a name that would suggest that it's
a generic tool that will work with any \s-1SQL\s0 database.
